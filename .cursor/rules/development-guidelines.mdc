---
description: 
globs: 
alwaysApply: false
---
# Development Guidelines

## Code Quality Standards

### No Hardcoded Content Policy
- **NEVER** add demo data, fallback content, or mock responses
- All content must come from AI generation or user input
- Show proper error messages when API setup is missing
- Reference: Memory ID 2673454825881658710

### API Integration Rules
- Always validate API key and system prompt before generation
- Use proper error handling with user-friendly messages
- No fallback mechanisms - fail gracefully with clear instructions
- Store API keys in localStorage, never in code

## Component Structure

### ContentResult Component Guidelines
- **Location**: [src/components/ContentResult.tsx](mdc:src/components/ContentResult.tsx)
- Always show AI analysis section at the top
- Ensure hook variations selector is always visible (even with 1 hook)
- Export options must be prominently displayed
- Use consistent color coding for metrics

### State Management
- Use localStorage for user preferences (format, language, API keys)
- Implement proper loading states with progress indicators
- Handle hook selection changes with proper callbacks

## Styling Conventions

### Design System
- **Primary Theme**: Purple gradients with glassmorphism
- **Background**: Dark purple with backdrop-blur effects
- **Cards**: `backdrop-blur-xl bg-white/5 border border-white/10`
- **Buttons**: Rounded corners with hover scale effects

### Color Coding
- **Green**: Success, optimal metrics, good scores
- **Yellow**: Warning, needs improvement
- **Red**: Error, poor scores, issues
- **Blue**: Information, neutral metrics
- **Pink**: Hook-related elements
- **Purple**: Content slides

## File Organization

### Key Files to Understand
- [package.json](mdc:package.json) - Dependencies and scripts
- [tailwind.config.ts](mdc:tailwind.config.ts) - Styling configuration
- [vite.config.ts](mdc:vite.config.ts) - Build configuration
- [src/index.css](mdc:src/index.css) - Global styles with branding removal

### Component Structure
- Keep components focused and single-responsibility
- Use TypeScript interfaces for all props
- Implement proper error boundaries
- Follow React hooks best practices

## Testing and Deployment

### Development
- Use `npm run dev` for development server
- Test with real API keys, not mock data
- Verify all AI features are visible and functional

### Production
- Use `npm run build` for production builds
- Verify no development branding appears in production
- Test all export formats work correctly
