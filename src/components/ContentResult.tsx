
import { Copy, Download, Search } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";

interface ContentResultProps {
  content: {
    title: string;
    slides: string[];
    searchTerms: string[];
    format: string;
  };
}

export const ContentResult = ({ content }: ContentResultProps) => {
  const { toast } = useToast();

  const copyToClipboard = (text: string, label: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: `${label} copied!`,
      description: "Content has been copied to your clipboard.",
    });
  };

  const copyAllSlides = () => {
    const allSlides = content.slides.join('\n\n---\n\n');
    copyToClipboard(allSlides, "All slides");
  };

  const copyAllSearchTerms = () => {
    const allTerms = content.searchTerms.join(', ');
    copyToClipboard(allTerms, "Search terms");
  };

  const downloadContent = () => {
    const contentText = `
VIRAL SLIDESHOW: ${content.title}
Format: ${content.format}

SLIDES:
${content.slides.map((slide, index) => `${index + 1}. ${slide}`).join('\n\n')}

SEARCH TERMS FOR IMAGES:
${content.searchTerms.map((term, index) => `${index + 1}. ${term}`).join('\n')}

Generated by ViralSlide
    `;

    const blob = new Blob([contentText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${content.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Content downloaded!",
      description: "Your slideshow content has been saved as a text file.",
    });
  };

  return (
    <div className="space-y-6">
      {/* Title and Actions */}
      <Card className="bg-white/10 backdrop-blur-lg border-white/20">
        <CardHeader>
          <div className="flex items-start justify-between">
            <div>
              <CardTitle className="text-white text-xl mb-2">{content.title}</CardTitle>
              <Badge variant="secondary" className="bg-purple-500/20 text-purple-300">
                {content.format}
              </Badge>
            </div>
            <div className="flex space-x-2">
              <Button
                size="sm"
                variant="outline"
                onClick={downloadContent}
                className="border-white/20 text-white hover:bg-white/10"
              >
                <Download className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* Slides */}
      <Card className="bg-white/10 backdrop-blur-lg border-white/20">
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="text-white">Slideshow Content</CardTitle>
            <Button
              size="sm"
              variant="outline"
              onClick={copyAllSlides}
              className="border-white/20 text-white hover:bg-white/10"
            >
              <Copy className="w-4 h-4 mr-2" />
              Copy All
            </Button>
          </div>
          <CardDescription className="text-gray-300">
            Each slide should be displayed with a background image
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {content.slides.map((slide, index) => (
            <div
              key={index}
              className="bg-white/5 rounded-lg p-4 border border-white/10 hover:bg-white/10 transition-all duration-200 group"
            >
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <span className="text-purple-400 font-medium text-sm">Slide {index + 1}</span>
                  <p className="text-white mt-1 leading-relaxed">{slide}</p>
                </div>
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => copyToClipboard(slide, `Slide ${index + 1}`)}
                  className="opacity-0 group-hover:opacity-100 transition-opacity text-white hover:bg-white/10"
                >
                  <Copy className="w-4 h-4" />
                </Button>
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      {/* Search Terms */}
      <Card className="bg-white/10 backdrop-blur-lg border-white/20">
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="text-white flex items-center">
              <Search className="w-5 h-5 mr-2 text-purple-400" />
              Image Search Terms
            </CardTitle>
            <Button
              size="sm"
              variant="outline"
              onClick={copyAllSearchTerms}
              className="border-white/20 text-white hover:bg-white/10"
            >
              <Copy className="w-4 h-4 mr-2" />
              Copy All
            </Button>
          </div>
          <CardDescription className="text-gray-300">
            Use these terms to find viral images for your slides
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-2">
            {content.searchTerms.map((term, index) => (
              <Button
                key={index}
                variant="secondary"
                size="sm"
                onClick={() => copyToClipboard(term, "Search term")}
                className="bg-purple-500/20 text-purple-300 hover:bg-purple-500/30 transition-colors"
              >
                {term}
                <Copy className="w-3 h-3 ml-2" />
              </Button>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
