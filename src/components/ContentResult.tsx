
import { Copy, Download, Search, CheckCircle2, Clock } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { useToast } from "@/hooks/use-toast";
import { useState } from "react";

interface ContentResultProps {
  content: {
    title: string;
    hook: string;
    slides: string[];
    cta: string;
    searchTerms: string[];
    format: string;
  };
}

export const ContentResult = ({ content }: ContentResultProps) => {
  const { toast } = useToast();
  const [copiedItems, setCopiedItems] = useState<Set<string>>(new Set());

  const copyToClipboard = async (text: string, label: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedItems(prev => new Set(prev).add(label));
      setTimeout(() => {
        setCopiedItems(prev => {
          const newSet = new Set(prev);
          newSet.delete(label);
          return newSet;
        });
      }, 2000);
      
      toast({
        title: `${label} copied!`,
        description: "Content has been copied to your clipboard.",
      });
    } catch (err) {
      toast({
        title: "Copy failed",
        description: "Please try again or copy manually.",
        variant: "destructive",
      });
    }
  };

  const copyAllSlides = () => {
    const allContent = [
      `HOOK: ${content.hook}`,
      ...content.slides.map((slide, index) => `SLIDE ${index + 2}: ${slide}`),
      `CTA: ${content.cta}`
    ].join('\n\n---\n\n');
    copyToClipboard(allContent, "All content");
  };

  const copyAllSearchTerms = () => {
    const allTerms = content.searchTerms.join(', ');
    copyToClipboard(allTerms, "Search terms");
  };

  const downloadContent = () => {
    const contentText = `
VIRAL SLIDESHOW: ${content.title}
Format: ${content.format}

HOOK (Slide 1):
${content.hook}

CONTENT SLIDES:
${content.slides.map((slide, index) => `Slide ${index + 2}: ${slide}`).join('\n\n')}

CTA (Final Slide):
${content.cta}

SEARCH TERMS FOR IMAGES:
${content.searchTerms.map((term, index) => `${index + 1}. ${term}`).join('\n')}

Generated by ViralSlide
    `;

    const blob = new Blob([contentText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${content.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Content downloaded!",
      description: "Your viral slideshow content has been saved as a text file.",
    });
  };

  const getCharacterCount = (text: string) => text.length;
  const getWordCount = (text: string) => text.trim().split(/\s+/).length;

  const getOptimalLengthStatus = (charCount: number, type: 'hook' | 'slide' | 'cta') => {
    const optimal = {
      hook: { min: 50, max: 120 },
      slide: { min: 30, max: 80 },
      cta: { min: 40, max: 100 }
    };
    
    const range = optimal[type];
    if (charCount < range.min) return { status: 'short', color: 'text-yellow-400' };
    if (charCount > range.max) return { status: 'long', color: 'text-red-400' };
    return { status: 'optimal', color: 'text-green-400' };
  };

  const CopyButton = ({ onClick, label, className = "" }: { onClick: () => void; label: string; className?: string }) => {
    const isCopied = copiedItems.has(label);
    
    return (
      <Button
        size="sm"
        variant="outline"
        onClick={onClick}
        className={`transition-all duration-200 font-medium ${className} ${
          isCopied ? 'bg-green-500/30 border-green-400/60 text-green-200' : ''
        }`}
      >
        {isCopied ? (
          <>
            <CheckCircle2 className="w-4 h-4 mr-2" />
            Copied!
          </>
        ) : (
          <>
            <Copy className="w-4 h-4 mr-2" />
            Copy
          </>
        )}
      </Button>
    );
  };

  const totalSlides = content.slides.length + 2; // +2 for hook and CTA
  const estimatedViewTime = Math.ceil(totalSlides * 3); // 3 seconds per slide

  return (
    <div className="space-y-6">
      {/* Title and Overview */}
      <Card className="bg-white/15 backdrop-blur-lg border-white/40 shadow-xl">
        <CardHeader>
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <CardTitle className="text-white text-xl mb-2 font-semibold">{content.title}</CardTitle>
              <div className="flex flex-wrap gap-2 mb-3">
                <Badge variant="secondary" className="bg-purple-500/30 text-purple-200 border border-purple-400/30">
                  {content.format}
                </Badge>
                <Badge variant="secondary" className="bg-blue-500/30 text-blue-200 border border-blue-400/30">
                  {totalSlides} slides
                </Badge>
                <Badge variant="secondary" className="bg-green-500/30 text-green-200 border border-green-400/30 flex items-center">
                  <Clock className="w-3 h-3 mr-1" />
                  ~{estimatedViewTime}s view time
                </Badge>
              </div>
              <div className="text-sm text-gray-200 font-medium">
                Character counts: Hook ({getCharacterCount(content.hook)}), CTA ({getCharacterCount(content.cta)})
              </div>
            </div>
            <div className="flex space-x-2">
              <Button
                size="sm"
                variant="outline"
                onClick={downloadContent}
                className="border-white text-white hover:text-gray-900 bg-white/20 hover:bg-white font-medium shadow-md"
              >
                <Download className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* Hook Section */}
      <Card className="bg-white/15 backdrop-blur-lg border-white/40 border-pink-400/60 shadow-xl">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex-1">
              <CardTitle className="text-white flex items-center font-semibold">
                ðŸ”¥ Viral Hook (Slide 1)
                <span className="ml-2 text-sm font-normal text-pink-200">
                  ({getCharacterCount(content.hook)} chars, {getWordCount(content.hook)} words)
                </span>
              </CardTitle>
              <CardDescription className="text-pink-100 font-medium">
                The scroll-stopping opener that grabs attention immediately
              </CardDescription>
              <div className="mt-2">
                <div className="flex items-center space-x-2">
                  <span className="text-xs text-gray-300">Length:</span>
                  <span className={`text-xs ${getOptimalLengthStatus(getCharacterCount(content.hook), 'hook').color}`}>
                    {getOptimalLengthStatus(getCharacterCount(content.hook), 'hook').status === 'optimal' ? 'Optimal' : 
                     getOptimalLengthStatus(getCharacterCount(content.hook), 'hook').status === 'short' ? 'Could be longer' : 'Consider shortening'}
                  </span>
                </div>
              </div>
            </div>
            <CopyButton
              onClick={() => copyToClipboard(content.hook, "Hook")}
              label="Hook"
              className="border-pink-400/40 text-pink-200 hover:bg-pink-400/20 bg-pink-500/10"
            />
          </div>
        </CardHeader>
        <CardContent>
          <div className="bg-pink-500/20 rounded-lg p-4 border border-pink-400/40">
            <p className="text-white font-medium leading-relaxed">{content.hook}</p>
          </div>
        </CardContent>
      </Card>

      {/* Content Slides */}
      <Card className="bg-white/15 backdrop-blur-lg border-white/40 shadow-xl">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex-1">
              <CardTitle className="text-white font-semibold">Content Slides (2-{content.slides.length + 1})</CardTitle>
              <CardDescription className="text-gray-200 font-medium">
                Value-driven content that educates and engages â€¢ {content.slides.length} slides
              </CardDescription>
            </div>
            <CopyButton
              onClick={copyAllSlides}
              label="All content"
              className="border-white text-white hover:text-gray-900 bg-white/20 hover:bg-white shadow-md"
            />
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          {content.slides.map((slide, index) => {
            const charCount = getCharacterCount(slide);
            const wordCount = getWordCount(slide);
            const lengthStatus = getOptimalLengthStatus(charCount, 'slide');
            
            return (
              <div
                key={index}
                className="bg-white/10 rounded-lg p-4 border border-white/30 hover:bg-white/15 transition-all duration-200 group shadow-md"
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <span className="text-purple-300 font-medium text-sm">Slide {index + 2}</span>
                      <span className="text-xs text-gray-300">
                        {charCount} chars â€¢ {wordCount} words
                      </span>
                      <span className={`text-xs ${lengthStatus.color}`}>
                        {lengthStatus.status === 'optimal' ? 'âœ“' : 
                         lengthStatus.status === 'short' ? 'âš ' : 'âš '}
                      </span>
                    </div>
                    <p className="text-white leading-relaxed font-medium">{slide}</p>
                  </div>
                  <CopyButton
                    onClick={() => copyToClipboard(slide, `Slide ${index + 2}`)}
                    label={`Slide ${index + 2}`}
                    className="opacity-0 group-hover:opacity-100 transition-opacity border-white text-white hover:text-gray-900 bg-white/20 hover:bg-white shadow-md"
                  />
                </div>
              </div>
            );
          })}
        </CardContent>
      </Card>

      {/* CTA Section */}
      <Card className="bg-white/15 backdrop-blur-lg border-white/40 border-green-400/60 shadow-xl">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex-1">
              <CardTitle className="text-white flex items-center font-semibold">
                ðŸ’¡ Call-to-Action (Final Slide)
                <span className="ml-2 text-sm font-normal text-green-200">
                  ({getCharacterCount(content.cta)} chars, {getWordCount(content.cta)} words)
                </span>
              </CardTitle>
              <CardDescription className="text-green-100 font-medium">
                Subtle product mention that provides value
              </CardDescription>
              <div className="mt-2">
                <div className="flex items-center space-x-2">
                  <span className="text-xs text-gray-300">Length:</span>
                  <span className={`text-xs ${getOptimalLengthStatus(getCharacterCount(content.cta), 'cta').color}`}>
                    {getOptimalLengthStatus(getCharacterCount(content.cta), 'cta').status === 'optimal' ? 'Optimal' : 
                     getOptimalLengthStatus(getCharacterCount(content.cta), 'cta').status === 'short' ? 'Could be longer' : 'Consider shortening'}
                  </span>
                </div>
              </div>
            </div>
            <CopyButton
              onClick={() => copyToClipboard(content.cta, "CTA")}
              label="CTA"
              className="border-green-400/40 text-green-200 hover:bg-green-400/20 bg-green-500/10"
            />
          </div>
        </CardHeader>
        <CardContent>
          <div className="bg-green-500/20 rounded-lg p-4 border border-green-400/40">
            <p className="text-white font-medium leading-relaxed">{content.cta}</p>
          </div>
        </CardContent>
      </Card>

      {/* Search Terms */}
      <Card className="bg-white/15 backdrop-blur-lg border-white/40 shadow-xl">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex-1">
              <CardTitle className="text-white flex items-center font-semibold">
                <Search className="w-5 h-5 mr-2 text-purple-400" />
                Image Search Terms ({content.searchTerms.length})
              </CardTitle>
              <CardDescription className="text-gray-200 font-medium">
                Use these terms to find viral images for your slides
              </CardDescription>
            </div>
            <CopyButton
              onClick={copyAllSearchTerms}
              label="Search terms"
              className="border-white text-white hover:text-gray-900 bg-white/20 hover:bg-white shadow-md"
            />
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
            {content.searchTerms.map((term, index) => (
              <Button
                key={index}
                variant="secondary"
                size="sm"
                onClick={() => copyToClipboard(term, `Search term: ${term}`)}
                className="bg-purple-500/30 text-purple-200 hover:bg-purple-500/40 transition-colors justify-start text-left h-auto py-2 px-3 border border-purple-400/30"
              >
                <div className="flex items-center w-full">
                  <span className="flex-1 truncate">{term}</span>
                  <Copy className="w-3 h-3 ml-2 opacity-50" />
                </div>
              </Button>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
