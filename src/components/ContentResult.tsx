import { Copy, Download, Search, CheckCircle2, Clock } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { useToast } from "@/hooks/use-toast";
import { useState } from "react";

interface ContentResultProps {
  content: {
    title: string;
    hookVariations: string[];
    selectedHookIndex: number;
    slides: string[];
    cta: string;
    searchTerms: string[];
    format: string;
  };
  onHookSelectionChange?: (index: number) => void;
}

export const ContentResult = ({ content, onHookSelectionChange }: ContentResultProps) => {
  const { toast } = useToast();
  const [copiedItems, setCopiedItems] = useState<Set<string>>(new Set());

  const copyToClipboard = async (text: string, label: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedItems(prev => new Set(prev).add(label));
      setTimeout(() => {
        setCopiedItems(prev => {
          const newSet = new Set(prev);
          newSet.delete(label);
          return newSet;
        });
      }, 2000);
      
      toast({
        title: `${label} copied!`,
        description: "Content has been copied to your clipboard.",
      });
    } catch (err) {
      toast({
        title: "Copy failed",
        description: "Please try again or copy manually.",
        variant: "destructive",
      });
    }
  };

  const copyAllSlides = () => {
    const allContent = [
      `HOOK: ${content.hookVariations[content.selectedHookIndex]}`,
      ...content.slides.map((slide, index) => `SLIDE ${index + 2}: ${slide}`),
      `CTA: ${content.cta}`
    ].join('\n\n---\n\n');
    copyToClipboard(allContent, "All content");
  };

  const copyAllSearchTerms = () => {
    const allTerms = content.searchTerms.join(', ');
    copyToClipboard(allTerms, "Search terms");
  };

  const copyInstagramFormat = () => {
    const instagramContent = [
      `ðŸ“± ${content.title}`,
      '',
      `ðŸ”¥ ${content.hookVariations[content.selectedHookIndex]}`,
      '',
      ...content.slides.map((slide, index) => `${index + 1}. ${slide}`),
      '',
      `ðŸ’¬ ${content.cta}`,
      '',
      '#viral #content #socialmedia #instagram #reels'
    ].join('\n');
    copyToClipboard(instagramContent, "Instagram format");
  };

  const copyTwitterThreadFormat = () => {
    const twitterThread = [
      `ðŸ§µ Thread: ${content.title}`,
      '',
      `1/ ${content.hookVariations[content.selectedHookIndex]}`,
      '',
      ...content.slides.map((slide, index) => `${index + 2}/ ${slide}`),
      '',
      `${content.slides.length + 3}/ ${content.cta}`
    ].join('\n');
    copyToClipboard(twitterThread, "Twitter thread");
  };

  const copyHookOnly = () => {
    copyToClipboard(content.hookVariations[content.selectedHookIndex], "Hook only");
  };

  const copySlidesOnly = () => {
    const slidesContent = content.slides.map((slide, index) => `${index + 1}. ${slide}`).join('\n\n');
    copyToClipboard(slidesContent, "Slides only");
  };

  const downloadContent = () => {
    const contentText = `
VIRAL SLIDESHOW: ${content.title}
Format: ${content.format}

HOOK (Slide 1):
${content.hookVariations[content.selectedHookIndex]}

CONTENT SLIDES:
${content.slides.map((slide, index) => `Slide ${index + 2}: ${slide}`).join('\n\n')}

CTA (Final Slide):
${content.cta}

SEARCH TERMS FOR IMAGES:
${content.searchTerms.map((term, index) => `${index + 1}. ${term}`).join('\n')}

Generated by ViralSlide
    `;

    const blob = new Blob([contentText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${content.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Content downloaded!",
      description: "Your viral slideshow content has been saved as a text file.",
    });
  };

  const getCharacterCount = (text: string) => text.length;
  const getWordCount = (text: string) => text.trim().split(/\s+/).length;

  const getOptimalLengthStatus = (charCount: number, type: 'hook' | 'slide' | 'cta') => {
    const optimal = {
      hook: { min: 50, max: 120 },
      slide: { min: 30, max: 80 },
      cta: { min: 40, max: 100 }
    };
    
    const range = optimal[type];
    if (charCount < range.min) return { status: 'short', color: 'text-yellow-400' };
    if (charCount > range.max) return { status: 'long', color: 'text-red-400' };
    return { status: 'optimal', color: 'text-green-400' };
  };

  const calculateHookStrength = (hook: string): { score: number; feedback: string } => {
    let score = 0;
    const feedback = [];

    // Check for psychological triggers
    const triggers = [
      /what if|imagine if|have you ever/i,
      /secret|hack|trick|method/i,
      /mistake|error|wrong|fail/i,
      /why.*nobody|why.*no one/i,
      /stop.*scroll|attention/i
    ];
    
    triggers.forEach(trigger => {
      if (trigger.test(hook)) score += 2;
    });

    // Check length (optimal 60-120 chars)
    const length = hook.length;
    if (length >= 60 && length <= 120) {
      score += 2;
      feedback.push("Good length");
    } else if (length < 60) {
      feedback.push("Could be longer");
    } else {
      feedback.push("Consider shortening");
    }

    // Check for emotional words
    const emotionalWords = /amazing|incredible|shocking|surprising|unbelievable|mind-blowing/i;
    if (emotionalWords.test(hook)) {
      score += 1;
      feedback.push("Good emotional appeal");
    }

    // Check for numbers
    if (/\d+/.test(hook)) {
      score += 1;
      feedback.push("Numbers add credibility");
    }

    score = Math.min(score, 10); // Cap at 10

    return {
      score,
      feedback: feedback.length > 0 ? feedback.join(", ") : "Good hook foundation"
    };
  };

  const calculateEngagementPrediction = (): { score: number; level: string; color: string } => {
    const selectedHook = content.hookVariations[content.selectedHookIndex];
    const hookStrength = calculateHookStrength(selectedHook);
    
    // Factor in hook strength, slide count, content length
    let score = hookStrength.score;
    
    // Good slide count (5 is optimal)
    if (content.slides.length === 5) score += 1;
    
    // Average slide length check
    const avgSlideLength = content.slides.reduce((sum, slide) => sum + slide.length, 0) / content.slides.length;
    if (avgSlideLength >= 30 && avgSlideLength <= 80) score += 1;
    
    // CTA quality
    if (content.cta.length >= 40 && content.cta.length <= 100) score += 1;

    const percentage = Math.round((score / 13) * 100);
    
    let level = "Low";
    let color = "text-red-400";
    
    if (percentage >= 80) {
      level = "Excellent";
      color = "text-green-400";
    } else if (percentage >= 60) {
      level = "Good";
      color = "text-blue-400";
    } else if (percentage >= 40) {
      level = "Fair";
      color = "text-yellow-400";
    }

    return { score: percentage, level, color };
  };

  const CopyButton = ({ onClick, label, className = "" }: { onClick: () => void; label: string; className?: string }) => {
    const isCopied = copiedItems.has(label);
    
    return (
      <Button
        size="sm"
        variant="outline"
        onClick={onClick}
        className={`transition-all duration-200 font-medium ${className} ${
          isCopied ? 'bg-green-500/30 border-green-400/60 text-green-200' : ''
        }`}
      >
        {isCopied ? (
          <>
            <CheckCircle2 className="w-4 h-4 mr-2" />
            Copied!
          </>
        ) : (
          <>
            <Copy className="w-4 h-4 mr-2" />
            Copy
          </>
        )}
      </Button>
    );
  };

  const totalSlides = content.slides.length + 2; // +2 for hook and CTA
  const estimatedViewTime = Math.ceil(totalSlides * 3); // 3 seconds per slide
  const selectedHook = content.hookVariations[content.selectedHookIndex];
  const hookStrength = calculateHookStrength(selectedHook);
  const engagementPrediction = calculateEngagementPrediction();
  
  // Calculate total content statistics
  const totalContentChars = content.slides.reduce((total, slide) => total + getCharacterCount(slide), 0);
  const totalContentWords = content.slides.reduce((total, slide) => total + getWordCount(slide), 0);

  return (
    <div className="space-y-6">
      {/* AI Analysis Section - Most Prominent */}
      <div className="backdrop-blur-xl bg-gradient-to-r from-blue-500/10 to-purple-500/10 border border-blue-400/30 rounded-2xl p-6 shadow-2xl hover:shadow-3xl transition-all duration-300">
        <h3 className="text-blue-200 font-bold text-xl mb-4 flex items-center">
          ðŸ¤– AI Content Analysis
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="text-center bg-white/5 rounded-xl p-4 border border-blue-400/20">
            <div className={`text-3xl font-bold ${engagementPrediction.color} mb-2`}>
              {engagementPrediction.score}%
            </div>
            <div className="text-sm text-white/70 mb-1">Engagement Prediction</div>
            <div className={`text-sm ${engagementPrediction.color} font-medium`}>
              {engagementPrediction.level}
            </div>
          </div>
          <div className="text-center bg-white/5 rounded-xl p-4 border border-pink-400/20">
            <div className={`text-3xl font-bold ${hookStrength.score >= 7 ? 'text-green-400' : hookStrength.score >= 4 ? 'text-yellow-400' : 'text-red-400'} mb-2`}>
              {hookStrength.score}/10
            </div>
            <div className="text-sm text-white/70 mb-1">Hook Strength</div>
            <div className={`text-sm ${hookStrength.score >= 7 ? 'text-green-400' : hookStrength.score >= 4 ? 'text-yellow-400' : 'text-red-400'} font-medium`}>
              {hookStrength.feedback}
            </div>
          </div>
          <div className="text-center bg-white/5 rounded-xl p-4 border border-cyan-400/20">
            <div className="text-3xl font-bold text-cyan-400 mb-2">
              {content.hookVariations.length}/3
            </div>
            <div className="text-sm text-white/70 mb-1">Hook Variations</div>
            <div className="text-sm text-cyan-400 font-medium">
              {content.hookVariations.length === 3 ? 'Complete' : 'Generating...'}
            </div>
          </div>
        </div>
      </div>

      {/* Title and Overview */}
      <div className="backdrop-blur-xl bg-white/5 border border-white/10 rounded-2xl p-6 shadow-2xl hover:shadow-3xl transition-all duration-300">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <h2 className="text-white text-xl mb-3 font-bold">{content.title}</h2>
            <div className="flex flex-wrap gap-2 mb-4">
              <span className="bg-purple-500/20 text-purple-200 border border-purple-400/30 px-3 py-1 rounded-full text-sm backdrop-blur-sm">
                {content.format}
              </span>
              <span className="bg-blue-500/20 text-blue-200 border border-blue-400/30 px-3 py-1 rounded-full text-sm backdrop-blur-sm">
                {totalSlides} slides
              </span>
              <span className="bg-green-500/20 text-green-200 border border-green-400/30 px-3 py-1 rounded-full text-sm backdrop-blur-sm flex items-center">
                <Clock className="w-3 h-3 mr-1" />
                ~{estimatedViewTime}s view time
              </span>
            </div>
            
            <div className="text-sm text-white/70 font-medium">
              Character counts: Hook ({getCharacterCount(content.hookVariations[content.selectedHookIndex])}), CTA ({getCharacterCount(content.cta)})
            </div>
          </div>
          <div className="flex space-x-2">
            <Button
              size="sm"
              variant="outline"
              onClick={downloadContent}
              className="border-white/20 text-white hover:text-gray-900 bg-white/10 hover:bg-white/90 font-medium shadow-lg rounded-xl hover:scale-105 transition-all duration-200"
            >
              <Download className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>

      {/* Hook Section */}
      <div className="backdrop-blur-xl bg-white/5 border border-pink-400/20 rounded-2xl p-6 shadow-2xl hover:shadow-3xl transition-all duration-300">
        <div className="flex items-center justify-between mb-4">
          <div className="flex-1">
            <h3 className="text-white font-bold text-lg mb-2 flex items-center">
              ðŸ”¥ Hook Variations (Slide 1)
              <span className="ml-2 text-sm font-normal text-pink-200">
                ({getCharacterCount(content.hookVariations[content.selectedHookIndex])} chars, {getWordCount(content.hookVariations[content.selectedHookIndex])} words)
              </span>
            </h3>
            <p className="text-pink-200/80 text-sm font-medium mb-3">
              Choose your favorite hook and see optimization feedback
            </p>
            <div className="grid grid-cols-3 gap-4 text-xs">
              <div className="flex items-center space-x-2">
                <span className="text-white/60">Length:</span>
                <span className={`${getOptimalLengthStatus(getCharacterCount(content.hookVariations[content.selectedHookIndex]), 'hook').color}`}>
                  {getOptimalLengthStatus(getCharacterCount(content.hookVariations[content.selectedHookIndex]), 'hook').status === 'optimal' ? 'Optimal' : 
                   getOptimalLengthStatus(getCharacterCount(content.hookVariations[content.selectedHookIndex]), 'hook').status === 'short' ? 'Could be longer' : 'Consider shortening'}
                </span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-white/60">Hook Strength:</span>
                <span className={`${hookStrength.score >= 7 ? 'text-green-400' : hookStrength.score >= 4 ? 'text-yellow-400' : 'text-red-400'}`}>
                  {hookStrength.score}/10 - {hookStrength.feedback}
                </span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-white/60">Engagement:</span>
                <span className={`${engagementPrediction.color}`}>
                  {engagementPrediction.level} ({engagementPrediction.score}%)
                </span>
              </div>
            </div>
          </div>
          <CopyButton
            onClick={() => copyToClipboard(content.hookVariations[content.selectedHookIndex], "Hook")}
            label="Hook"
            className="border-pink-400/40 text-pink-200 hover:bg-pink-400/20 bg-pink-500/10 rounded-xl"
          />
        </div>
        
        {/* Hook Variations Selector */}
        <div className="mb-6">
          <div className="text-sm text-pink-200 mb-3 font-medium">
            {content.hookVariations.length > 1 ? 'Choose your favorite hook:' : 'Generated Hook (AI will create 3 variations):'}
          </div>
          <div className="space-y-3">
            {content.hookVariations.map((hook, index) => (
              <button
                key={index}
                onClick={() => onHookSelectionChange?.(index)}
                className={`w-full text-left p-4 rounded-xl border transition-all duration-300 backdrop-blur-sm ${
                  content.selectedHookIndex === index
                    ? 'bg-pink-500/20 border-pink-400/40 text-white shadow-lg scale-102'
                    : 'bg-white/5 border-pink-400/20 text-pink-200 hover:bg-pink-500/10 hover:scale-102'
                }`}
              >
                <div className="flex items-start space-x-3">
                  <span className="text-xs font-bold mt-1 text-pink-300 bg-pink-500/20 px-2 py-1 rounded-full">#{index + 1}</span>
                  <p className="font-medium leading-relaxed flex-1">{hook}</p>
                  <div className="text-xs text-pink-300 mt-1 bg-pink-500/10 px-2 py-1 rounded-full">
                    {getCharacterCount(hook)} chars
                  </div>
                </div>
              </button>
            ))}
            {/* Show placeholder for missing hook variations */}
            {content.hookVariations.length < 3 && Array.from({ length: 3 - content.hookVariations.length }).map((_, index) => (
              <div
                key={`placeholder-${index}`}
                className="w-full text-left p-4 rounded-xl border border-dashed border-pink-400/30 bg-pink-500/5 backdrop-blur-sm opacity-50"
              >
                <div className="flex items-start space-x-3">
                  <span className="text-xs font-bold mt-1 text-pink-300/50 bg-pink-500/10 px-2 py-1 rounded-full">
                    #{content.hookVariations.length + index + 1}
                  </span>
                  <p className="font-medium leading-relaxed flex-1 text-pink-200/50 italic">
                    Hook variation {content.hookVariations.length + index + 1} will appear here...
                  </p>
                  <div className="text-xs text-pink-300/50 mt-1 bg-pink-500/5 px-2 py-1 rounded-full">
                    Generating...
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        {/* Selected Hook Display */}
        <div className="bg-gradient-to-r from-pink-500/10 to-purple-500/10 rounded-xl p-4 border border-pink-400/30 backdrop-blur-sm">
          <p className="text-white font-medium leading-relaxed">{content.hookVariations[content.selectedHookIndex]}</p>
        </div>
      </div>

      {/* Export Options - Prominent Position */}
      <div className="backdrop-blur-xl bg-gradient-to-r from-green-500/10 to-blue-500/10 border border-green-400/30 rounded-2xl p-6 shadow-2xl hover:shadow-3xl transition-all duration-300">
        <div className="mb-4">
          <h3 className="text-green-200 font-bold text-xl mb-2 flex items-center">
            ðŸ“¤ Export Your Content
          </h3>
          <p className="text-white/70 text-sm font-medium">
            Copy in different formats optimized for various platforms
          </p>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <button
            onClick={copyHookOnly}
            className="flex flex-col items-center p-4 border border-blue-400/40 text-blue-200 hover:bg-blue-400/20 bg-blue-500/10 rounded-xl hover:scale-105 font-medium transition-all duration-200"
          >
            <div className="text-2xl mb-2">ðŸŽ¯</div>
            <div className="font-bold text-sm">Hook Only</div>
            <div className="text-xs text-blue-300/70 text-center mt-1">Just the attention-grabbing opener</div>
          </button>
          
          <button
            onClick={copySlidesOnly}
            className="flex flex-col items-center p-4 border border-purple-400/40 text-purple-200 hover:bg-purple-400/20 bg-purple-500/10 rounded-xl hover:scale-105 font-medium transition-all duration-200"
          >
            <div className="text-2xl mb-2">ðŸ“š</div>
            <div className="font-bold text-sm">Slides Only</div>
            <div className="text-xs text-purple-300/70 text-center mt-1">Content without hook/CTA</div>
          </button>
          
          <button
            onClick={copyInstagramFormat}
            className="flex flex-col items-center p-4 border border-pink-400/40 text-pink-200 hover:bg-pink-400/20 bg-pink-500/10 rounded-xl hover:scale-105 font-medium transition-all duration-200"
          >
            <div className="text-2xl mb-2">ðŸ“±</div>
            <div className="font-bold text-sm">Instagram</div>
            <div className="text-xs text-pink-300/70 text-center mt-1">With emojis & hashtags</div>
          </button>
          
          <button
            onClick={copyTwitterThreadFormat}
            className="flex flex-col items-center p-4 border border-cyan-400/40 text-cyan-200 hover:bg-cyan-400/20 bg-cyan-500/10 rounded-xl hover:scale-105 font-medium transition-all duration-200"
          >
            <div className="text-2xl mb-2">ðŸ§µ</div>
            <div className="font-bold text-sm">Twitter Thread</div>
            <div className="text-xs text-cyan-300/70 text-center mt-1">Numbered thread format</div>
          </button>
          
          <button
            onClick={copyAllSlides}
            className="flex flex-col items-center p-4 border border-green-400/40 text-green-200 hover:bg-green-400/20 bg-green-500/10 rounded-xl hover:scale-105 font-medium transition-all duration-200"
          >
            <div className="text-2xl mb-2">ðŸ“‹</div>
            <div className="font-bold text-sm">Complete Content</div>
            <div className="text-xs text-green-300/70 text-center mt-1">Everything formatted</div>
          </button>
          
          <button
            onClick={downloadContent}
            className="flex flex-col items-center p-4 border border-yellow-400/40 text-yellow-200 hover:bg-yellow-400/20 bg-yellow-500/10 rounded-xl hover:scale-105 font-medium transition-all duration-200"
          >
            <div className="text-2xl mb-2">ðŸ’¾</div>
            <div className="font-bold text-sm">Download File</div>
            <div className="text-xs text-yellow-300/70 text-center mt-1">Save as .txt file</div>
          </button>
        </div>
      </div>



      {/* Content Slides */}
      <div className="backdrop-blur-xl bg-white/5 border border-white/10 rounded-2xl p-6 shadow-2xl hover:shadow-3xl transition-all duration-300">
        <div className="flex items-center justify-between mb-4">
          <div className="flex-1">
            <h3 className="text-white font-bold text-lg mb-2 flex items-center">
              ðŸ“š Content Slides (2-{totalSlides})
              <span className="ml-2 text-sm font-normal text-white/70">
                ({totalContentChars} total chars, ~{Math.ceil(totalContentWords / 250)} min read)
              </span>
            </h3>
            <p className="text-white/70 text-sm font-medium">
              The educational or engaging content body
            </p>
          </div>
          <CopyButton
            onClick={copySlidesOnly}
            label="Slides"
            className="border-purple-400/40 text-purple-200 hover:bg-purple-400/20 bg-purple-500/10 rounded-xl"
          />
        </div>
        <div className="space-y-4">
          {content.slides.map((slide, index) => (
            <div key={index} className="bg-gradient-to-r from-purple-500/10 to-blue-500/10 rounded-xl p-4 border border-purple-400/30 backdrop-blur-sm">
              <div className="flex items-center justify-between mb-3">
                <span className="text-purple-300 font-bold text-sm bg-purple-500/20 px-3 py-1 rounded-full">
                  Slide {index + 2}
                </span>
                <div className="text-xs text-purple-300 bg-purple-500/10 px-2 py-1 rounded-full">
                  {getCharacterCount(slide)} chars, {getWordCount(slide)} words
                </div>
              </div>
              <p className="text-white font-medium leading-relaxed">{slide}</p>
            </div>
          ))}
        </div>
      </div>

      {/* CTA Section */}
      <div className="backdrop-blur-xl bg-white/5 border border-green-400/20 rounded-2xl p-6 shadow-2xl hover:shadow-3xl transition-all duration-300">
        <div className="flex items-center justify-between mb-4">
          <div className="flex-1">
            <h3 className="text-white font-bold text-lg mb-2 flex items-center">
              ðŸŽ¯ Call to Action (Final Slide)
              <span className="ml-2 text-sm font-normal text-green-200">
                ({getCharacterCount(content.cta)} chars, {getWordCount(content.cta)} words)
              </span>
            </h3>
            <p className="text-white/70 text-sm font-medium mb-2">
              The conversion-focused ending that drives action
            </p>
            <div className="text-xs text-white/60">
              <span>Length Status: </span>
              <span className={`${getOptimalLengthStatus(getCharacterCount(content.cta), 'cta').color}`}>
                {getOptimalLengthStatus(getCharacterCount(content.cta), 'cta').status === 'optimal' ? 'Optimal length' : 
                 getOptimalLengthStatus(getCharacterCount(content.cta), 'cta').status === 'short' ? 'Could be more compelling' : 'Consider shortening for impact'}
              </span>
            </div>
          </div>
          <CopyButton
            onClick={() => copyToClipboard(content.cta, "CTA")}
            label="CTA"
            className="border-green-400/40 text-green-200 hover:bg-green-400/20 bg-green-500/10 rounded-xl"
          />
        </div>
        <div className="bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-xl p-4 border border-green-400/30 backdrop-blur-sm">
          <p className="text-white font-medium leading-relaxed">{content.cta}</p>
        </div>
      </div>

      {/* Search Terms */}
      <Card className="bg-white/15 backdrop-blur-lg border-white/40 shadow-xl">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex-1">
              <CardTitle className="text-white flex items-center font-semibold">
                <Search className="w-5 h-5 mr-2 text-purple-400" />
                Image Search Terms ({content.searchTerms.length})
              </CardTitle>
              <CardDescription className="text-gray-200 font-medium">
                Use these terms to find engaging visuals for your social media content
              </CardDescription>
            </div>
            <CopyButton
              onClick={copyAllSearchTerms}
              label="Search terms"
              className="border-white text-white hover:text-gray-900 bg-white/20 hover:bg-white shadow-md"
            />
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
            {content.searchTerms.map((term, index) => (
              <Button
                key={index}
                variant="secondary"
                size="sm"
                onClick={() => copyToClipboard(term, `Search term: ${term}`)}
                className="bg-purple-500/30 text-purple-200 hover:bg-purple-500/40 transition-colors justify-start text-left h-auto py-2 px-3 border border-purple-400/30"
              >
                <div className="flex items-center w-full">
                  <span className="flex-1 truncate">{term}</span>
                  <Copy className="w-3 h-3 ml-2 opacity-50" />
                </div>
              </Button>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
